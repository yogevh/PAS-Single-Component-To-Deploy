{
    "Resources": {
        "DeployBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fc7df917-b0b9-4452-9aaf-e71861744c7d"
                }
            }
        },
        "DeployBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "DeployBucket"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "LambdaDeployRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Action": [
                                "s3:PutObject",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Sid": "DenyUnEncryptedObjectUploads",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "StringNotEquals": {
                                    "s3:x-amz-server-side-encryption": "AES256"
                                }
                            }
                        },
                        {
                            "Sid": " DenyUnEncryptedInflightOperations",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": false
                                }
                            }
                        }
                    ]
                }
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e0f67985-8361-4891-b23a-860e90e37412"
                }
            }
        },
        "LambdaDeployRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "CloudWatch",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "23d3a636-2b70-4f0c-8849-9e7861edb7b6"
                }
            }
        },
        "StorePasswordLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Encrypts given string and saves chipper to bucket",
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import uuid",
                                "import boto3",
                                "import cfnresponse",
                                "",
                                "def createFile(bucket, file, body):",
                                "    s3Client = boto3.client('s3')",
                                "    return s3Client.put_object(",
                                "        Bucket = bucket,",
                                "        Key = file,",
                                "        ServerSideEncryption = 'AES256',",
                                "        Body = body",
                                "    )",
                                "",
                                "def deleteFile(bucket, file):",
                                "    s3Client = boto3.client('s3')",
                                "    return s3Client.delete_object(",
                                "        Bucket = bucket,",
                                "        Key = file",
                                "    )",
                                "",
                                "def lambda_handler(event, context):",
                                "",
                                "    physicalResourceId = str(uuid.uuid4())",
                                "    if 'PhysicalResourceId' in event:",
                                "        physicalResourceId = event['PhysicalResourceId']",
                                "",
                                "    for key in ['PlainText', 'BucketId']:",
                                "        if key not in event['ResourceProperties'] or not event['ResourceProperties'][key]:",
                                "            print 'The properties PlainText and BucketId must not be empty'",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)",
                                "",
                                "    try:",
                                "        if event['RequestType'] == 'Delete':",
                                "            deleteFile(event['ResourceProperties']['BucketId'], physicalResourceId)",
                                "            print 'The secret file deleted'",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                                "",
                                "        if event['RequestType'] == 'Create':",
                                "            createFile(event['ResourceProperties']['BucketId'], physicalResourceId, event['ResourceProperties']['PlainText'])",
                                "            print 'The secret file created'",
                                "            response = { 'FileId': physicalResourceId }",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)",
                                "",
                                "    except Exception as E:",
                                "        print E",
                                "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaDeployRole",
                        "Arn"
                    ]
                }
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "192fe816-1984-4ba5-a3f7-29055aad8c80"
                }
            }
        },
        "StoreAdminPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultAdminPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "69245eb8-bdbd-4010-8c12-427f13304df6"
                }
            }
        },
        "ComponentInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "ComponentInstanceRole"
                    }
                ]
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0a86e69d-bcb8-4af3-a110-fc22bccb01bc"
                }
            }
        },
        "ComponentInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e0ba415c-61e6-41bf-b795-a8f45558060a"
                }
            }
        },
        "CPMMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ComponentInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "ComponentInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "ComponentInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Components"
                    ]
                },
                "InstanceType": {
                    "Ref": "ComponentInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r CPMMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource CPMMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "ComponentInstanceProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import sys\n",
                                            "import subprocess\n",
                                            "\n",
                                            "callArray = [",
                                            "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                            "'CPM',",
                                            "'/accepteula',",
                                            "'Yes',",
                                            "'/vaultip',",
                                            "'",
                                            {
                                                "Ref": "VaultPrivateIP"
                                            },
                                            ",",
                                            {
                                                "Ref": "DRPrivateIP"
                                            },
                                            "',",
                                            "'/vaultport',",
                                            "'1858',",
                                            "'/vaultuser',",
                                            "'Administrator',",
                                            "'/bucketname',",
                                            "'",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "',",
                                            "'/objectkey',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "']\n",
                                            "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
								"waitAfterCompletion": "0"
                            },
                            "2-CPMserviceConfig": {
                                "command": "sc config \"CyberArk Password Manager\" start=auto",
								"waitAfterCompletion": "0"
                            },
                            "3-CPMSserviceConfig": {
                                "command": "sc config \"CyberArk Central Policy Manager Scanner\" start=auto",
								"waitAfterCompletion": "0"
                            },
                            "4-CPMserviceStart": {
                                "command": "sc start \"CyberArk Password Manager\"",
								"waitAfterCompletion": "0"
                            },
                            "5-CPMSserviceStart": {
                                "command": "sc start \"CyberArk Central Policy Manager Scanner\"",
								"waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "StoreAdminPassword"
            ],
            "Condition": "CreateCPMCondition",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DeletionPolicy": "Retain"
        },
        "PVWAMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ComponentInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "ComponentInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "ComponentInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Components"
                    ]
                },
                "InstanceType": {
                    "Ref": "ComponentInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r PVWAMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource PVWAMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "ComponentInstanceProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import sys\n",
                                            "import subprocess\n",
                                            "\n",
                                            "callArray = [",
                                            "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                            "'PVWA',",
                                            "'/accepteula',",
                                            "'Yes',",
                                            "'/vaultip',",
                                            "'",
                                            {
                                                "Ref": "VaultPrivateIP"
                                            },
                                            ",",
                                            {
                                                "Ref": "DRPrivateIP"
                                            },
                                            "',",
                                            "'/vaultport',",
                                            "'1858',",
                                            "'/vaultuser',",
                                            "'Administrator',",
                                            "'/bucketname',",
                                            "'",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "',",
                                            "'/objectkey',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "']\n",
                                            "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
								"waitAfterCompletion": "0"
                            },
                            "2-startAppPool": {
                                "command": "powershell -command \"& {&'Import-Module' WebAdministration}\"; \"& {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}\"; \"& {&'Set-ItemProperty' -Path IIS:\\AppPools\\PasswordVaultWebAccessPool -Name autoStart -Value 'true'}\"",
								"waitAfterCompletion": "0"
                            },
                            "3-CSTserviceConfig": {
                                "command": "sc config \"CyberArk Scheduled Tasks\" start=auto",
								"waitAfterCompletion": "0"
                            },
                            "4-CSTserviceStart": {
                                "command": "sc start \"CyberArk Scheduled Tasks\"",
								"waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "StoreAdminPassword"
            ],
            "Condition": "CreatePVWACondition",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DeletionPolicy": "Retain"
        },
        "PSMMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ComponentInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "ComponentInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "ComponentInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Components"
                    ]
                },
                "InstanceType": {
                    "Ref": "ComponentInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r PSMMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource PSMMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "ComponentInstanceProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import sys\n",
                                            "import subprocess\n",
                                            "import urllib2\n",
                                            "\n",
                                            "callArray = [",
                                            "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                            "'PSM',",
                                            "'/accepteula',",
                                            "'Yes',",
                                            "'/vaultip',",
                                            "'",
                                            {
                                                "Ref": "VaultPrivateIP"
                                            },
                                            ",",
                                            {
                                                "Ref": "DRPrivateIP"
                                            },
                                            "',",
                                            "'/vaultport',",
                                            "'1858',",
                                            "'/vaultuser',",
                                            "'Administrator',",
                                            "'/bucketname',",
                                            "'",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "',",
                                            "'/objectkey',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "']\n",
                                            "properties = urllib2.urlopen('http://169.254.169.254/latest/meta-data').read()\n",
                                            "if 'public-ipv4' in properties:\n",
                                            "\tipv4 = urllib2.urlopen('http://169.254.169.254/latest/meta-data/public-ipv4').read()\n",
                                            "\tif ipv4 and ipv4 <> 'none':\n",
                                            "\t\tcallArray.append('/psmpublicip')\n",
                                            "\t\tcallArray.append(ipv4)\n",
                                            "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
                                "waitAfterCompletion": "0"
                            },
                            "2-PSMserviceConfig": {
                                "command": "sc config \"Cyber-Ark Privileged Session Manager\" start=auto",
                                "waitAfterCompletion": "0"
                            },
                            "3-PSMserviceStart": {
                                "command": "sc start \"Cyber-Ark Privileged Session Manager\"",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                },
                "AWS::CloudFormation::Designer": {
                    "id": "ad4995b9-77b9-4d96-afff-1d18fe66b453"
                }
            },
            "DependsOn": [
                "StoreAdminPassword"
            ],
            "Condition": "CreatePSMCondition",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DeletionPolicy": "Retain"
        },
        "PSMPMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ComponentInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "ComponentInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "ComponentInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "PSMP"
                    ]
                },
                "InstanceType": {
                    "Ref": "ComponentInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -e\n",
								"yum update -y aws-cfn-bootstrap\n",

								"/opt/aws/bin/cfn-init -v ",
								"         --stack ", { "Ref" : "AWS::StackName" },
								"         --resource PSMPMachine ",
								"         --region ", { "Ref" : "AWS::Region" }, "\n",

								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ", { "Ref" : "AWS::StackName" },
								"         --resource PSMPMachine ",
								"         --region ", { "Ref" : "AWS::Region" }, "\n"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "ComponentInstanceProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/tmp/PSMPInstall/activatePSMP": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
											"#!/bin/bash -e\n",
											"chmod 700 /tmp/PSMPInstall/register_and_activation.sh\n",
											"aws configure set default.s3.signature_version s3v4\n",
											"aws s3api get-object --bucket ",
												{
													"Ref": "DeployBucket"
												},
												" --key ", 
												{
													"Fn::GetAtt": [
														"StoreAdminPassword",
														"FileId"
													]
												},
												" /tmp/PSMPInstall/temppassword\n",
											"echo Object successfully retrieved from S3 bucket.\n",
											
											"/opt/CARKpsmp/bin/createcredfile /tmp/PSMPInstall/user.cred Password -Username Administrator -Password $(cat /tmp/PSMPInstall/temppassword) -Hostname\n",
											"echo Credentials file successfully created.\n",
											
											"shred -u /tmp/PSMPInstall/temppassword\n",
											"aws s3api delete-object --bucket ",
												{
													"Ref": "DeployBucket"
												},
												" --key ",
												{
													"Fn::GetAtt": [
														"StoreAdminPassword",
														"FileId"
													]
												},
												"\n",
											"echo Object successfully deleted from S3 bucket.\n",
											
											"/tmp/PSMPInstall/register_and_activation.sh /tmp/PSMPInstall/user.cred ",
												{
                                                "Ref": "VaultPrivateIP"
                                                },
                                                ",",
                                                {
                                                    "Ref": "DRPrivateIP"
                                                },
												" $(curl http://169.254.169.254/latest/meta-data/instance-id) y\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
							"01-Chmod": {
                                "command": "sudo chmod 700 /tmp/PSMPInstall/activatePSMP"
                            },
                            "02-PSMPdeploy": {
                                "command": "sudo /tmp/PSMPInstall/activatePSMP"
                            },
							"03-ClearData": {
                                "command": "sudo shred -u /tmp/PSMPInstall/activatePSMP"
                            },
							"04-RemoveInstallationFolder": {
                                "command": "sudo rm -rf /tmp/PSMPInstall/"
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "StoreAdminPassword"
            ],
            "Condition": "CreatePSMPCondition",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M"
                }
            },
			"DeletionPolicy": "Retain"
        },
        "ComponentS3DeployBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ComponentInstancesDeployBucketAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "StoreAdminPassword",
                                                "FileId"
                                            ]
                                        }
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "ComponentInstanceRole"
                    }
                ]
            },
            "DependsOn": [
                "StoreAdminPassword",
                "DeployBucket"
            ],
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4e192270-c648-4ac1-b63d-bf91d1647242"
                }
            }
        }
    },
    "Parameters": {
        "EULA": {
            "Type": "String",
            "Description": "I have read and agree to the Terms and `ions.",
            "AllowedValues": [
                "Accept",
                "Decline"
            ],
            "Default": "Decline"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Select an existing Key Pair from your AWS account.",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "VaultPrivateIP": {
            "Type": "String",
            "Description": "Enter the Vault Private IP."
        },
        "DRPrivateIP": {
            "Type": "String",
            "Description": "Enter the DR Private iP."
        },
        "VaultAdminPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Administrator user.",
            "NoEcho": true,
            "MinLength": 8
        },
        "RetypeAdminPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault Administrator user.",
            "NoEcho": true,
            "MinLength": 8
        },
        "ComponentToInstall": {
            "Type": "String",
            "Description": "Choose the Component to install.",
            "AllowedValues": ["CPM", "PVWA", "PSM","PSMP"],
            "Default": "CPM"
        },
        "ComponentInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the Component instance.",
            "Default": "CyberArk Component"
        },
        "ComponentInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the Component instance.",
            "AllowedValues": [
                "t2.micro"
            ],
            "Default": "t2.micro"
        },
        "ComponentInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the Component instance."
        },
        "ComponentInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the Component instance will reside."
        }
    },
    "Conditions": {
        "EULACondition": {
            "Fn::Equals": [
                "Accept",
                {
                    "Ref": "EULA"
                }
            ]
        },
        "CreateCPMCondition" : {
            "Fn::Equals": [
                "CPM",
                {
                    "Ref" : "ComponentToInstall"
                }
           ]
        },
        "CreatePVWACondition" : {
            "Fn::Equals": [
                "PVWA",
                {
                    "Ref" : "ComponentToInstall"
                }
           ]
        },
        "CreatePSMCondition" : {
            "Fn::Equals": [
                "PSM",
                {
                    "Ref" : "ComponentToInstall"
                }
           ]
        },
        "CreatePSMPCondition" : {
            "Fn::Equals": [
                "PSMP",
                {
                    "Ref" : "ComponentToInstall"
                }
           ]
        }
    },
    "Rules": {
        "PasswordConfirmation": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "VaultAdminPassword"
                            },
                            {
                                "Ref": "RetypeAdminPassword"
                            }
                        ]
                    },
                    "AssertDescription": "The password confirmation does not match."
                }
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General parameters"
                    },
                    "Parameters": [
                        "EULA",
                        "KeyName"
                    ]
                },
                {
                    "Label": {
                        "default": "Vault and DR information"
                    },
                    "Parameters": [
                        "VaultPrivateIP",
                        "DRPrivateIP",
                        "VaultAdminPassword",
                        "RetypeAdminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Component configuration"
                    },
                    "Parameters": [
                        "ComponentToInstall",
                        "ComponentInstanceName",
                        "ComponentInstanceType",
                        "ComponentInstanceSecurityGroups",
                        "ComponentInstanceSubnetId"
                    ]
                }
            ],
            "ParameterLabels": {
                "EULA": {
                    "default": "License Agreement"
                },
                "KeyName": {
                    "default": "Key Pair"
                },
                "VaultPrivateIP": {
                    "default": "Vault Private IP"
                },
                "DRPrivateIP": {
                    "default": "DR Private IP"
                },
                "VaultAdminPassword": {
                    "default": "Vault Admin Password"
                },
                "RetypeAdminPassword": {
                    "default": "Retype Admin Password"
                },
                "ComponentToInstall": {
                    "default": "Compontnt To Install"
                },
                "ComponentInstanceName": {
                    "default": "Component Instance Name"
                },
                "ComponentInstanceType": {
                    "default": "Component Instance Type"
                },
                "ComponentInstanceSecurityGroups": {
                    "default": "Component Instance Security Groups"
                },
                "ComponentInstanceSubnetId": {
                    "default": "Component Instance Subnet Id"
                }
            }
        },
        "AWS::CloudFormation::Designer": {
            "e0ba415c-61e6-41bf-b795-a8f45558060a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 80,
                    "y": 80
                },
                "z": 1,
                "embeds": []
            },
            "0a86e69d-bcb8-4af3-a110-fc22bccb01bc": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -30,
                    "y": 130
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "e0ba415c-61e6-41bf-b795-a8f45558060a"
                ]
            },
            "23d3a636-2b70-4f0c-8849-9e7861edb7b6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 490,
                    "y": 370
                },
                "z": 1,
                "embeds": []
            },
            "192fe816-1984-4ba5-a3f7-29055aad8c80": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 500,
                    "y": 240
                },
                "z": 1,
                "embeds": []
            },
            "fc7df917-b0b9-4452-9aaf-e71861744c7d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 500,
                    "y": 80
                },
                "z": 1,
                "embeds": []
            },
            "e0f67985-8361-4891-b23a-860e90e37412": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 500,
                    "y": 160
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "fc7df917-b0b9-4452-9aaf-e71861744c7d"
                ]
            },
            "69245eb8-bdbd-4010-8c12-427f13304df6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 290,
                    "y": 340
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "23d3a636-2b70-4f0c-8849-9e7861edb7b6",
                    "e0f67985-8361-4891-b23a-860e90e37412"
                ]
            },
            "4e192270-c648-4ac1-b63d-bf91d1647242": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 150,
                    "y": 220
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "e0ba415c-61e6-41bf-b795-a8f45558060a"
                ]
            },
            "ad4995b9-77b9-4d96-afff-1d18fe66b453": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -20,
                    "y": 350
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "69245eb8-bdbd-4010-8c12-427f13304df6",
                    "fc7df917-b0b9-4452-9aaf-e71861744c7d"
                ]
            }
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "Vault": "ami-ae701ad4",
                "Components": "ami-5bc5ad21",
                "PSMP": "ami-6394ad75"
            },
            "us-east-2": {
                "Vault": "ami-506d4535",
                "Components": "ami-556c4430",
                "PSMP": "ami-600b2a05"
            },
            "us-west-1": {
                "Vault": "ami-fa62669a",
                "Components": "ami-276f6b47",
                "PSMP": "ami-d0416eb0"
            },
            "us-west-2": {
                "Vault": "ami-1f60c667",
                "Components": "ami-4665c33e",
                "PSMP": "ami-0508187c"
            },
            "ca-central-1": {
                "Vault": "ami-63bb0107",
                "Components": "ami-aec77dca",
                "PSMP": "ami-97853af3"
            },
            "eu-west-1": {
                "Vault": "ami-bd1792c4",
                "Components": "ami-4f1d9836",
                "PSMP": "ami-058f697c"
            },
            "eu-central-1": {
                "Vault": "ami-98bc34f7",
                "Components": "ami-2aba3245",
                "PSMP": "ami-b014b5df"
            },
            "eu-west-2": {
                "Vault": "ami-d95148bd",
                "Components": "ami-18534a7c",
                "PSMP": "ami-ecd2c488"
            },
            "ap-southeast-1": {
                "Vault": "ami-8b2c4cf7",
                "Components": "ami-2023435c",
                "PSMP": "ami-22810a41"
            },
            "ap-southeast-2": {
                "Vault": "ami-99a452fb",
                "Components": "ami-0db84e6f",
                "PSMP": "ami-63796b00"
            },
            "ap-northeast-2": {
                "Vault": "ami-fd52f493",
                "Components": "ami-e555f38b",
                "PSMP": "ami-1865ba76"
            },
            "ap-northeast-1": {
                "Vault": "ami-d59517b3",
                "Components": "ami-dd9311bb",
                "PSMP": "ami-fed5c899"
            },
            "ap-south-1": {
                "Vault": "ami-23bcf44c",
                "Components": "ami-b9bdf5d6",
                "PSMP": "ami-60fb850f"
            },
            "sa-east-1": {
                "Vault": "ami-cc6d2ba0",
                "Components": "ami-3b612757",
                "PSMP": "ami-a5ddb7c9"
            }
        }
    }
}